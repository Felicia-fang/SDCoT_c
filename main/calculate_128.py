import os
import sys
import random
import numpy as np
import argparse
import torch
import vtkmodules.all as vtk
import csv
# os.environ["CUDA_DEVICE_ORDER"] = "PCI_BUS_ID"
os.environ["CUDA_VISIBLE_DEVICES"] = "1"

BASE_DIR = os.path.dirname(os.path.abspath(__file__))
ROOT_DIR = os.path.dirname(BASE_DIR)
sys.path.append(os.path.join(ROOT_DIR, 'datasets'))
sys.path.append(os.path.join(ROOT_DIR, 'models'))
sys.path.append(os.path.join(ROOT_DIR, 'utils'))
from model import create_detection_model, load_detection_model
import vis_utils as vis
from ap_helper import parse_predictions, flip_axis_to_depth, parse_groundtruths,APCalculator,flip_axis_to_camera
from box_util import get_3d_box_depth


def detect_3d_objects_base(net, point_cloud, eval_config_dict):
    net.eval()
    with torch.no_grad():
        end_points = net(point_cloud)
    end_points['point_clouds'] = point_cloud
    pred_map_cls = parse_predictions(end_points, eval_config_dict)
    print(pred_map_cls)
    num_pred_obj = len(pred_map_cls[0])
    print('Finished detection. %d object detected.' % (num_pred_obj))
    pred_box3d_list = []
    for i in range(num_pred_obj):
        pred_box3d_list.append(flip_axis_to_depth(pred_map_cls[0][i][1]))
    # print(pred_box3d_list)
    return end_points, pred_box3d_list,pred_map_cls

def visualize(args, split, scene_name=None):

    # =========================== Init Dataset ===========================
    if args.dataset == 'sunrgbd':
        sys.path.append(os.path.join(ROOT_DIR, 'sunrgbd'))
        import sunrgbd_utils
        from sunrgbd import SunrgbdBaseDatasetConfig, SunrgbdNovelDatasetConfig, SunrgbdDataset
        from sunrgbd_cfg import cfg
        base_model_config = SunrgbdBaseDatasetConfig()
        DATASET = SunrgbdDataset(num_points=args.num_point, use_color=args.use_color,
                                 use_height=(not args.no_height), augment=False)
        DATA_PATH = os.path.join(ROOT_DIR, 'sunrgbd',
                                 'sunrgbd_%s_pc_bbox_50k_%s' % ('v1' if cfg.USE_V1 else 'v2', split))
        ALL_SCENE_NAMES = list(set([os.path.basename(x)[0:6] for x in os.listdir(DATA_PATH)]))
    elif args.dataset == 'scannet':
        sys.path.append(os.path.join(ROOT_DIR, 'scannet'))
        import scannet_utils
        from scannet import ScannetBaseDatasetConfig, ScannetNovelDatasetConfig, ScannetDataset
        from scannet_cfg import cfg
        base_model_config = ScannetBaseDatasetConfig()
        DATASET = ScannetDataset(num_points=args.num_point, use_color=args.use_color,
                                 use_height=(not args.no_height), augment=False)
        DATA_PATH = os.path.join(ROOT_DIR, 'scannet', 'scannet_%s_detection_data' % split)

        ALL_SCENE_NAMES = list(set([os.path.basename(x)[0:12] for x in os.listdir(DATA_PATH) if x.startswith('scene')]))
    else:
        print('Unknown dataset %s. Exiting...' % (args.dataset))
        exit(-1)

    if scene_name is None:
        scene_name = random.choice(ALL_SCENE_NAMES)
    print('{0} | {1} | {2}'.format(args.dataset, split, scene_name))

    ##  ==================================== mAp ====================================
    if args.dataset == 'sunrgbd':
        # original_point_cloud = np.load(os.path.join(DATA_PATH, scene_name) + '_pc.npz')['pc']  # Nx6
        depth_file = os.path.join(
            '/data2/wufang/sunrgbd_data/sunrgbd/sunrgbd_trainval/depth',
            '%06d.mat' % int(scene_name))
        original_point_cloud = sunrgbd_utils.load_depth_points_mat(depth_file)
        original_point_cloud[:, 3:6] *= 255.

        gt_bboxes = np.load(os.path.join(DATA_PATH, '%06d_bbox.npy' % int(scene_name)))
        bbox_mask_base = np.in1d(gt_bboxes[:, -1], cfg.BASE_CLASSES)
        gt_bboxes_base = gt_bboxes[bbox_mask_base, :]
    else:
        gt_bboxes = np.load(os.path.join(DATA_PATH, scene_name) + '_bbox.npy')
        # print(gt_bboxes)
        bbox_mask_base = np.in1d(gt_bboxes[:, -1], cfg.BASE_NYUIDS)
        # print(bbox_mask_base)
        gt_bboxes_base = gt_bboxes[bbox_mask_base, :]
    print("base")
    gt_base_box3d_list = []
    for i in range(gt_bboxes_base.shape[0]):
        box = gt_bboxes_base[i]
        # gt_base_box3d_list.append(box[6])
        if args.dataset == 'sunrgbd':
            box3d = get_3d_box_depth(box[3:6]*2, box[6], box[0:3])
        else:
            box3d = get_3d_box_depth(box[3:6], 0, box[0:3])
        # gt_base_box3d_list.append(box3d)
        element_to_append = (box[6], box3d)
        gt_base_box3d_list.append(element_to_append)
    print("base bbox",gt_bboxes_base.shape[0])
    # print(gt_base_box3d_list)
    from scannet_val import ScannetValDataset
    test_dataset = ScannetValDataset(all_classes=False,
                                         num_points=40000,
                                         use_color=args.use_color,
                                         use_height=(not args.no_height),
                                         augment=False)
    dataset_config=test_dataset.dataset_config
    ap_calculator = APCalculator(args.ap_iou_threshold, dataset_config.class2type)
    new_gt_base_box3d_list = [gt_base_box3d_list]
    gt_base_box3d_list_all = new_gt_base_box3d_list
    csv_filename = '/data2/wufang/SDCoT/scannet/psu/scene0000_00.csv'
    base_pred_map_cls = []
    import ast
    try:
        with open(csv_filename, 'r', newline='') as csvfile:
            csv_reader = csv.reader(csvfile)                
            next(csv_reader, None)
            for row in csv_reader:
                # print(row)
                class_val = float(row[0])
                # print(class_val)
                data_list = row[1].replace("[", "").replace("]", "").split()
                # print(data_list)
                data_array = np.array(data_list, dtype=float)
                # print(data_array)
                bbox_val = data_array.reshape(-1, 3)
                # print(bbox_val)
                # print(bbox_val)
                prob_val = float(row[2])
                # print(prob_val)
                base_pred_map_cls.append((class_val, bbox_val, prob_val))
    except Exception as e:
        print(f"csv'{csv_filename}' faiseï¼š{str(e)}")
    base_pred_map_cls=[base_pred_map_cls]
    base_pred_map_cls_thresh = [item for item in base_pred_map_cls[0] if item[-1] > 0.95]
    base_pred_map_cls_thresh=[base_pred_map_cls_thresh]
    # print(base_pred_map_cls_thresh)
    num_pred_obj = len(base_pred_map_cls_thresh[0])
    print('Finished detection. %d object detected.' % (num_pred_obj))
    pred_box3d_list = []
    pred_box3d_list_draw=[]
    for i in range(num_pred_obj):
        pred_box3d_list_draw.append(flip_axis_to_depth(base_pred_map_cls_thresh[0][i][1]))
        concat=(int(base_pred_map_cls_thresh[0][i][0]),base_pred_map_cls_thresh[0][i][1],base_pred_map_cls_thresh[0][i][2])
        # concat=(base_pred_map_cls_thresh[0][i][0],flip_axis_to_depth(base_pred_map_cls_thresh[0][i][1]),base_pred_map_cls_thresh[0][i][2])

        # pred_box3d_list.append(flip_axis_to_depth(base_pred_map_cls_thresh[0][i][1]))
        pred_box3d_list.append(concat)
    # print(pred_box3d_list)
    print("0000000000000000000000000")
    # print(gt_base_box3d_list_all[0])
    mapping = {36: 0, 4: 1, 10: 2, 3: 3, 5: 4, 12: 5, 16: 6, 14: 7,
            8: 8, 39: 9, 11: 10, 24:11 ,28:12 ,34:13}

    gt_base_box3d_list = [(mapping[x] if x in mapping else x,y) for x,y in gt_base_box3d_list_all[0]]
    gt_base_box3d_list=[gt_base_box3d_list]
    # print(gt_base_box3d_list)
    pred_box3d_list=[pred_box3d_list]

    gt_box3d_list_draw=[]
    for i in range(len(gt_base_box3d_list[0])):
        # gt_box3d_list_draw.append(flip_axis_to_camera(gt_base_box3d_list[0][i][1]))
        concat=(gt_base_box3d_list[0][i][0],flip_axis_to_camera(gt_base_box3d_list[0][i][1]))
        gt_box3d_list_draw.append(concat)
    gt_box3d_list_draw=[gt_box3d_list_draw]
    # 11111111111111111111111111111111111111111111111111111111111111111111111

    # ap_calculator.step(pred_box3d_list, gt_box3d_list_draw)
    
    a=[[(8, np.array([[-1.62607834, -0.30508017, -2.20352466],
       [-1.62607834, -0.30508017, -2.38363926],
       [-1.92779162, -0.30508017, -2.38363926],
       [-1.92779162, -0.30508017, -2.20352466],
       [-1.62607834, -1.94040418, -2.20352466],
       [-1.62607834, -1.94040418, -2.38363926],
       [-1.92779162, -1.94040418, -2.38363926],
       [-1.92779162, -1.94040418, -2.20352466]]), 0.22744863), (8, np.array([[-1.32460117,  0.06290392,  2.31361786],
       [-1.32460117,  0.06290392,  2.00738987],
       [-1.51413966,  0.06290392,  2.00738987],
       [-1.51413966,  0.06290392,  2.31361786],
       [-1.32460117, -2.09253434,  2.31361786],
       [-1.32460117, -2.09253434,  2.00738987],
       [-1.51413966, -2.09253434,  2.00738987],
       [-1.51413966, -2.09253434,  2.31361786]]), 0.14410523), (9, np.array([[ 1.5383716 , -0.05445767, -1.01106462],
       [ 1.5383716 , -0.05445767, -1.37060371],
       [ 1.22260305, -0.05445767, -1.37060371],
       [ 1.22260305, -0.05445767, -1.01106462],
       [ 1.5383716 , -0.39905449, -1.01106462],
       [ 1.5383716 , -0.39905449, -1.37060371],
       [ 1.22260305, -0.39905449, -1.37060371],
       [ 1.22260305, -0.39905449, -1.01106462]]), 0.46857965), (4, np.array([[-0.25480966, -0.01203473,  2.06500718],
       [-0.25480966, -0.01203473,  1.52481535],
       [-0.80334767, -0.01203473,  1.52481535],
       [-0.80334767, -0.01203473,  2.06500718],
       [-0.25480966, -0.87552087,  2.06500718],
       [-0.25480966, -0.87552087,  1.52481535],
       [-0.80334767, -0.87552087,  1.52481535],
       [-0.80334767, -0.87552087,  2.06500718]]), 0.998838), (8, np.array([[-1.33056824,  0.10408812,  2.0438021 ],
       [-1.33056824,  0.10408812,  1.21528856],
       [-1.63046176,  0.10408812,  1.21528856],
       [-1.63046176,  0.10408812,  2.0438021 ],
       [-1.33056824, -2.15823823,  2.0438021 ],
       [-1.33056824, -2.15823823,  1.21528856],
       [-1.63046176, -2.15823823,  1.21528856],
       [-1.63046176, -2.15823823,  2.0438021 ]]), 0.15279907), (8, np.array([[ 1.70310528, -0.333378  ,  2.23904148],
       [ 1.70310528, -0.333378  ,  1.3290697 ],
       [ 1.56839984, -0.333378  ,  1.3290697 ],
       [ 1.56839984, -0.333378  ,  2.23904148],
       [ 1.70310528, -1.84728511,  2.23904148],
       [ 1.70310528, -1.84728511,  1.3290697 ],
       [ 1.56839984, -1.84728511,  1.3290697 ],
       [ 1.56839984, -1.84728511,  2.23904148]]), 0.052844293), (9, np.array([[ 0.53695092, -0.30666499,  2.39593509],
       [ 0.53695092, -0.30666499,  2.11512896],
       [-0.29331625, -0.30666499,  2.11512896],
       [-0.29331625, -0.30666499,  2.39593509],
       [ 0.53695092, -0.81692441,  2.39593509],
       [ 0.53695092, -0.81692441,  2.11512896],
       [-0.29331625, -0.81692441,  2.11512896],
       [-0.29331625, -0.81692441,  2.39593509]]), 0.12752853), (4, np.array([[ 1.1221832 ,  0.01406363,  2.28443609],
       [ 1.1221832 ,  0.01406363,  1.60583963],
       [ 0.41395998,  0.01406363,  1.60583963],
       [ 0.41395998,  0.01406363,  2.28443609],
       [ 1.1221832 , -0.92457715,  2.28443609],
       [ 1.1221832 , -0.92457715,  1.60583963],
       [ 0.41395998, -0.92457715,  1.60583963],
       [ 0.41395998, -0.92457715,  2.28443609]]), 0.9997851), (8, np.array([[-0.67848181, -0.41070532,  2.47202447],
       [-0.67848181, -0.41070532,  2.32431552],
       [-1.14246178, -0.41070532,  2.32431552],
       [-1.14246178, -0.41070532,  2.47202447],
       [-0.67848181, -1.71936584,  2.47202447],
       [-0.67848181, -1.71936584,  2.32431552],
       [-1.14246178, -1.71936584,  2.32431552],
       [-1.14246178, -1.71936584,  2.47202447]]), 0.17837027), (8, np.array([[ 1.65765089, -0.14959141, -1.49824254],
       [ 1.65765089, -0.14959141, -2.48903187],
       [ 1.45163494, -0.14959141, -2.48903187],
       [ 1.45163494, -0.14959141, -1.49824254],
       [ 1.65765089, -1.42711417, -1.49824254],
       [ 1.65765089, -1.42711417, -2.48903187],
       [ 1.45163494, -1.42711417, -2.48903187],
       [ 1.45163494, -1.42711417, -1.49824254]]), 0.59011644), (8, np.array([[ 1.54760353, -0.14941218,  2.37070482],
       [ 1.54760353, -0.14941218,  2.23260243],
       [ 0.93184598, -0.14941218,  2.23260243],
       [ 0.93184598, -0.14941218,  2.37070482],
       [ 1.54760353, -1.92884156,  2.37070482],
       [ 1.54760353, -1.92884156,  2.23260243],
       [ 0.93184598, -1.92884156,  2.23260243],
       [ 0.93184598, -1.92884156,  2.37070482]]), 0.11027184), (8, np.array([[-1.42306122, -0.15862439, -1.51781316],
       [-1.42306122, -0.15862439, -2.39624648],
       [-1.63360373, -0.15862439, -2.39624648],
       [-1.63360373, -0.15862439, -1.51781316],
       [-1.42306122, -2.08054545, -1.51781316],
       [-1.42306122, -2.08054545, -2.39624648],
       [-1.63360373, -2.08054545, -2.39624648],
       [-1.63360373, -2.08054545, -1.51781316]]), 0.48234537), (8, np.array([[ 1.43757809, -0.13474675, -2.35972573],
       [ 1.43757809, -0.13474675, -2.56874917],
       [ 0.31176924, -0.13474675, -2.56874917],
       [ 0.31176924, -0.13474675, -2.35972573],
       [ 1.43757809, -1.53591148, -2.35972573],
       [ 1.43757809, -1.53591148, -2.56874917],
       [ 0.31176924, -1.53591148, -2.56874917],
       [ 0.31176924, -1.53591148, -2.35972573]]), 0.6390799), (8, np.array([[ 0.78437245, -0.20515596, -2.39066637],
       [ 0.78437245, -0.20515596, -2.60752976],
       [-0.57440579, -0.20515596, -2.60752976],
       [-0.57440579, -0.20515596, -2.39066637],
       [ 0.78437245, -1.74126829, -2.39066637],
       [ 0.78437245, -1.74126829, -2.60752976],
       [-0.57440579, -1.74126829, -2.60752976],
       [-0.57440579, -1.74126829, -2.39066637]]), 0.0589079), (0, np.array([[ 0.61672816,  0.30713828, -0.45322452],
       [ 0.61672816,  0.30713828, -1.52521708],
       [-0.48954562,  0.30713828, -1.52521708],
       [-0.48954562,  0.30713828, -0.45322452],
       [ 0.61672816, -0.20603392, -0.45322452],
       [ 0.61672816, -0.20603392, -1.52521708],
       [-0.48954562, -0.20603392, -1.52521708],
       [-0.48954562, -0.20603392, -0.45322452]]), 0.887268), (4, np.array([[ 0.02930681,  0.01961678, -0.35861932],
       [ 0.02930681,  0.01961678, -1.03839077],
       [-0.64502189,  0.01961678, -1.03839077],
       [-0.64502189,  0.01961678, -0.35861932],
       [ 0.02930681, -0.85351843, -0.35861932],
       [ 0.02930681, -0.85351843, -1.03839077],
       [-0.64502189, -0.85351843, -1.03839077],
       [-0.64502189, -0.85351843, -0.35861932]]), 0.9986319), (4, np.array([[ 0.12387548, -0.03318377,  0.46214218],
       [ 0.12387548, -0.03318377, -0.16752411],
       [-0.57723243, -0.03318377, -0.16752411],
       [-0.57723243, -0.03318377,  0.46214218],
       [ 0.12387548, -0.80288414,  0.46214218],
       [ 0.12387548, -0.80288414, -0.16752411],
       [-0.57723243, -0.80288414, -0.16752411],
       [-0.57723243, -0.80288414,  0.46214218]]), 0.9882161), (7, np.array([[ 0.50560737, -0.10658056,  2.50315405],
       [ 0.50560737, -0.10658056,  0.7849729 ],
       [-0.56698927, -0.10658056,  0.7849729 ],
       [-0.56698927, -0.10658056,  2.50315405],
       [ 0.50560737, -0.77463864,  2.50315405],
       [ 0.50560737, -0.77463864,  0.7849729 ],
       [-0.56698927, -0.77463864,  0.7849729 ],
       [-0.56698927, -0.77463864,  2.50315405]]), 0.41467264), (4, np.array([[-0.19751188,  0.02909738,  1.44055408],
       [-0.19751188,  0.02909738,  0.83691484],
       [-0.73087814,  0.02909738,  0.83691484],
       [-0.73087814,  0.02909738,  1.44055408],
       [-0.19751188, -0.85167015,  1.44055408],
       [-0.19751188, -0.85167015,  0.83691484],
       [-0.73087814, -0.85167015,  0.83691484],
       [-0.73087814, -0.85167015,  1.44055408]]), 0.99962986), (4, np.array([[-0.24986237, -0.02680666,  0.92796121],
       [-0.24986237, -0.02680666,  0.40560093],
       [-0.7024718 , -0.02680666,  0.40560093],
       [-0.7024718 , -0.02680666,  0.92796121],
       [-0.24986237, -0.7693321 ,  0.92796121],
       [-0.24986237, -0.7693321 ,  0.40560093],
       [-0.7024718 , -0.7693321 ,  0.40560093],
       [-0.7024718 , -0.7693321 ,  0.92796121]]), 0.58510554), (3, np.array([[ 1.91264797,  0.10075323,  1.16230967],
       [ 1.91264797,  0.10075323, -1.54296717],
       [ 1.30317878,  0.10075323, -1.54296717],
       [ 1.30317878,  0.10075323,  1.16230967],
       [ 1.91264797, -0.91952399,  1.16230967],
       [ 1.91264797, -0.91952399, -1.54296717],
       [ 1.30317878, -0.91952399, -1.54296717],
       [ 1.30317878, -0.91952399,  1.16230967]]), 0.5643805), (9, np.array([[-0.88761299, -0.11914662, -2.1859537 ],
       [-0.88761299, -0.11914662, -2.5692071 ],
       [-1.39896638, -0.11914662, -2.5692071 ],
       [-1.39896638, -0.11914662, -2.1859537 ],
       [-0.88761299, -1.00832888, -2.1859537 ],
       [-0.88761299, -1.00832888, -2.5692071 ],
       [-1.39896638, -1.00832888, -2.5692071 ],
       [-1.39896638, -1.00832888, -2.1859537 ]]), 0.9468253), (4, np.array([[ 0.60620458,  0.00572981,  1.38737159],
       [ 0.60620458,  0.00572981,  0.78507752],
       [ 0.00241088,  0.00572981,  0.78507752],
       [ 0.00241088,  0.00572981,  1.38737159],
       [ 0.60620458, -0.83489265,  1.38737159],
       [ 0.60620458, -0.83489265,  0.78507752],
       [ 0.00241088, -0.83489265,  0.78507752],
       [ 0.00241088, -0.83489265,  1.38737159]]), 0.9996836), (4, np.array([[ 0.22958665, -0.0861082 ,  1.00232658],
       [ 0.22958665, -0.0861082 ,  0.36054685],
       [-0.45471855, -0.0861082 ,  0.36054685],
       [-0.45471855, -0.0861082 ,  1.00232658],
       [ 0.22958665, -0.76360947,  1.00232658],
       [ 0.22958665, -0.76360947,  0.36054685],
       [-0.45471855, -0.76360947,  0.36054685],
       [-0.45471855, -0.76360947,  1.00232658]]), 0.8912606), (4, np.array([[-0.25138258,  0.02441891,  0.16335075],
       [-0.25138258,  0.02441891, -0.45306816],
       [-0.75599981,  0.02441891, -0.45306816],
       [-0.75599981,  0.02441891,  0.16335075],
       [-0.25138258, -0.81864741,  0.16335075],
       [-0.25138258, -0.81864741, -0.45306816],
       [-0.75599981, -0.81864741, -0.45306816],
       [-0.75599981, -0.81864741,  0.16335075]]), 0.9993242), (7, np.array([[-0.40088769, -0.02818648,  0.8989517 ],
       [-0.40088769, -0.02818648, -0.64814489],
       [-1.26907066, -0.02818648, -0.64814489],
       [-1.26907066, -0.02818648,  0.8989517 ],
       [-0.40088769, -0.89291789,  0.8989517 ],
       [-0.40088769, -0.89291789, -0.64814489],
       [-1.26907066, -0.89291789, -0.64814489],
       [-1.26907066, -0.89291789,  0.8989517 ]]), 0.054640744), (10, np.array([[-1.54545348, -0.91523815, -0.74069732],
       [-1.54545348, -0.91523815, -1.36232144],
       [-1.60914666, -0.91523815, -1.36232144],
       [-1.60914666, -0.91523815, -0.74069732],
       [-1.54545348, -1.6494634 , -0.74069732],
       [-1.54545348, -1.6494634 , -1.36232144],
       [-1.60914666, -1.6494634 , -1.36232144],
       [-1.60914666, -1.6494634 , -0.74069732]]), 0.07399272), (0, np.array([[ 1.40160256,  0.2205848 ,  0.2110666 ],
       [ 1.40160256,  0.2205848 , -0.96734106],
       [ 0.22781986,  0.2205848 , -0.96734106],
       [ 0.22781986,  0.2205848 ,  0.2110666 ],
       [ 1.40160256, -0.25697776,  0.2110666 ],
       [ 1.40160256, -0.25697776, -0.96734106],
       [ 0.22781986, -0.25697776, -0.96734106],
       [ 0.22781986, -0.25697776,  0.2110666 ]]), 0.3897877), (4, np.array([[ 0.44660759,  0.02535778,  0.38424161],
       [ 0.44660759,  0.02535778, -0.18556985],
       [-0.11287352,  0.02535778, -0.18556985],
       [-0.11287352,  0.02535778,  0.38424161],
       [ 0.44660759, -0.84528773,  0.38424161],
       [ 0.44660759, -0.84528773, -0.18556985],
       [-0.11287352, -0.84528773, -0.18556985],
       [-0.11287352, -0.84528773,  0.38424161]]), 0.9996928), (4, np.array([[ 0.64451308,  0.0183318 , -0.24120765],
       [ 0.64451308,  0.0183318 , -0.8948111 ],
       [-0.01263202,  0.0183318 , -0.8948111 ],
       [-0.01263202,  0.0183318 , -0.24120765],
       [ 0.64451308, -0.84357414, -0.24120765],
       [ 0.64451308, -0.84357414, -0.8948111 ],
       [-0.01263202, -0.84357414, -0.8948111 ],
       [-0.01263202, -0.84357414, -0.24120765]]), 0.999602), (0, np.array([[ 1.11717195,  0.20794035,  0.97265419],
       [ 1.11717195,  0.20794035, -0.13212975],
       [-0.04386706,  0.20794035, -0.13212975],
       [-0.04386706,  0.20794035,  0.97265419],
       [ 1.11717195, -0.28373859,  0.97265419],
       [ 1.11717195, -0.28373859, -0.13212975],
       [-0.04386706, -0.28373859, -0.13212975],
       [-0.04386706, -0.28373859,  0.97265419]]), 0.7051439)]]
    a_thresh = [item for sublist in a for item in sublist if item[-1] > 0.45]
    a_thresh=[a_thresh]
    b=[[(4, np.array([[ 0.43450268,  0.02388376,  0.40409756],
       [ 0.43450268,  0.02388376, -0.13617253],
       [-0.2104393 ,  0.02388376, -0.13617253],
       [-0.2104393 ,  0.02388376,  0.40409756],
       [ 0.43450268, -0.85746616,  0.40409756],
       [ 0.43450268, -0.85746616, -0.13617253],
       [-0.2104393 , -0.85746616, -0.13617253],
       [-0.2104393 , -0.85746616,  0.40409756]])), (4, np.array([[ 0.61282057,  0.0247311 , -0.26027438],
       [ 0.61282057,  0.0247311 , -0.82800177],
       [-0.02238291,  0.0247311 , -0.82800177],
       [-0.02238291,  0.0247311 , -0.26027438],
       [ 0.61282057, -0.84770113, -0.26027438],
       [ 0.61282057, -0.84770113, -0.82800177],
       [-0.02238291, -0.84770113, -0.82800177],
       [-0.02238291, -0.84770113, -0.26027438]])), (4, np.array([[ 0.57233101, -0.01076096,  1.33647352],
       [ 0.57233101, -0.01076096,  0.83684391],
       [ 0.03770065, -0.01076096,  0.83684391],
       [ 0.03770065, -0.01076096,  1.33647352],
       [ 0.57233101, -0.87984824,  1.33647352],
       [ 0.57233101, -0.87984824,  0.83684391],
       [ 0.03770065, -0.87984824,  0.83684391],
       [ 0.03770065, -0.87984824,  1.33647352]])), (4, np.array([[ 0.11101234,  0.02945602, -0.66645864],
       [ 0.11101234,  0.02945602, -1.2163026 ],
       [-0.34690479,  0.02945602, -1.2163026 ],
       [-0.34690479,  0.02945602, -0.66645864],
       [ 0.11101234, -0.85623193, -0.66645864],
       [ 0.11101234, -0.85623193, -1.2163026 ],
       [-0.34690479, -0.85623193, -1.2163026 ],
       [-0.34690479, -0.85623193, -0.66645864]])), (4, np.array([[-0.13493109,  0.02573639, -0.25672251],
       [-0.13493109,  0.02573639, -0.7633428 ],
       [-0.72898626,  0.02573639, -0.7633428 ],
       [-0.72898626,  0.02573639, -0.25672251],
       [-0.13493109, -0.84731358, -0.25672251],
       [-0.13493109, -0.84731358, -0.7633428 ],
       [-0.72898626, -0.84731358, -0.7633428 ],
       [-0.72898626, -0.84731358, -0.25672251]])), (4, np.array([[-0.29954785, -0.0019713 ,  1.38118795],
       [-0.29954785, -0.0019713 ,  0.8652837 ],
       [-0.71683246, -0.0019713 ,  0.8652837 ],
       [-0.71683246, -0.0019713 ,  1.38118795],
       [-0.29954785, -0.86622495,  1.38118795],
       [-0.29954785, -0.86622495,  0.8652837 ],
       [-0.71683246, -0.86622495,  0.8652837 ],
       [-0.71683246, -0.86622495,  1.38118795]])), (4, np.array([[ 1.08849084, -0.0391618 ,  2.38833737],
       [ 1.08849084, -0.0391618 ,  1.61084056],
       [ 0.44861245, -0.0391618 ,  1.61084056],
       [ 0.44861245, -0.0391618 ,  2.38833737],
       [ 1.08849084, -0.93157119,  2.38833737],
       [ 1.08849084, -0.93157119,  1.61084056],
       [ 0.44861245, -0.93157119,  1.61084056],
       [ 0.44861245, -0.93157119,  2.38833737]])), (4, np.array([[-0.4125927 ,  0.00918722,  0.19817024],
       [-0.4125927 ,  0.00918722, -0.28842249],
       [-0.74946256,  0.00918722, -0.28842249],
       [-0.74946256,  0.00918722,  0.19817024],
       [-0.4125927 , -0.85560495,  0.19817024],
       [-0.4125927 , -0.85560495, -0.28842249],
       [-0.74946256, -0.85560495, -0.28842249],
       [-0.74946256, -0.85560495,  0.19817024]])), (4, np.array([[-0.23861638, -0.00605965,  2.01115632],
       [-0.23861638, -0.00605965,  1.54433346],
       [-0.80096957, -0.00605965,  1.54433346],
       [-0.80096957, -0.00605965,  2.01115632],
       [-0.23861638, -0.88616145,  2.01115632],
       [-0.23861638, -0.88616145,  1.54433346],
       [-0.80096957, -0.88616145,  1.54433346],
       [-0.80096957, -0.88616145,  2.01115632]])), (8, np.array([[-1.47090554, -0.01919962, -1.22723126],
       [-1.47090554, -0.01919962, -2.30070663],
       [-1.65577817, -0.01919962, -2.30070663],
       [-1.65577817, -0.01919962, -1.22723126],
       [-1.47090554, -2.0496273 , -1.22723126],
       [-1.47090554, -2.0496273 , -2.30070663],
       [-1.65577817, -2.0496273 , -2.30070663],
       [-1.65577817, -2.0496273 , -1.22723126]])), (9, np.array([[-0.84900427, -0.04142689, -2.25743186],
       [-0.84900427, -0.04142689, -2.57111657],
       [-1.41993022, -0.04142689, -2.57111657],
       [-1.41993022, -0.04142689, -2.25743186],
       [-0.84900427, -0.89930714, -2.25743186],
       [-0.84900427, -0.89930714, -2.57111657],
       [-1.41993022, -0.89930714, -2.57111657],
       [-1.41993022, -0.89930714, -2.25743186]])), (8, np.array([[-1.33265632, -0.03759385, -1.18796112],
       [-1.33265632, -0.03759385, -2.43638609],
       [-1.56365401, -0.03759385, -2.43638609],
       [-1.56365401, -0.03759385, -1.18796112],
       [-1.33265632, -2.04941391, -1.18796112],
       [-1.33265632, -2.04941391, -2.43638609],
       [-1.56365401, -2.04941391, -2.43638609],
       [-1.56365401, -2.04941391, -1.18796112]]))]]
    ap_calculator.step(a_thresh, b)


    # Evaluate average precision
    metrics_dict = ap_calculator.compute_metrics()
    for key in metrics_dict:
        print('eval %s: %f' % (key, metrics_dict[key]))
    # print(pred_map_cls)



if __name__ == '__main__':
    parser = argparse.ArgumentParser()

    parser.add_argument('--dataset', type=str, default='scannet', help='Dataset name: scannet|sunrgbd')
    parser.add_argument('--base_model_checkpoint_path', default='/data2/wufang/SDCoT/log_scannet/log_basetrain_20230911-02:22',
                        help='Detection model checkpoint path [default: None]') #log_sunrgbd/log_basetrain_20230912-12:31
    parser.add_argument('--novel_model_checkpoint_path', default='/data2/wufang/SDCoT/log_scannet/log_SDCoT_20230913-20:41',
                        help='Detection model checkpoint path [default: None]') #log_sunrgbd/log_SDCoT_20230912-22:59
    # parser.add_argument('--base_model_checkpoint_path', default='/data2/wufang/SDCoT/log_sunrgbd/log_basetrain_20230912-12:31',
    #                     help='Detection model checkpoint path [default: None]') #log_sunrgbd/log_basetrain_20230912-12:31
    # parser.add_argument('--novel_model_checkpoint_path', default='/data2/wufang/SDCoT/log_sunrgbd/log_SDCoT_20230912-22:59',
    #                     help='Detection model checkpoint path [default: None]') #log_sunrgbd/log_SDCoT_20230912-22:59
    parser.add_argument('--num_target', type=int, default=128, help='Proposal number [default: 256]')
    parser.add_argument('--vote_factor', type=int, default=1, help='Vote factor [default: 1]')
    parser.add_argument('--cluster_sampling', default='vote_fps',
                        help='Sampling strategy for vote clusters: vote_fps, seed_fps, random [default: vote_fps]')

    parser.add_argument('--num_point', type=int, default=40000, help='Point Number [default: 20000]')
    parser.add_argument('--no_height', action='store_true', help='Do NOT use height signal in input.')
    parser.add_argument('--use_color', action='store_true', help='Use RGB color in input.')

    parser.add_argument('--pseudo_obj_conf_thresh', type=float, default=0.95,
                        help='Confidence score threshold w.r.t. objectness prediction for hard selection of psuedo bboxes')
    parser.add_argument('--pseudo_cls_conf_thresh', type=float, default=0.9,
                        help='Confidence score threshold w.r.t. class prediction for hard selection of psuedo bboxes')
    parser.add_argument('--ap_iou_threshold', default='0.25', help='AP IoU thresholds')
    args = parser.parse_args()

    args.num_input_channel = int(args.use_color) * 3 + int(not args.no_height) * 1

    # visualize(args, split='train', scene_name='005051')
    visualize(args, split='train', scene_name='scene0000_00')